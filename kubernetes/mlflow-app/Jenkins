pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "arudenko2002/iris-classifier:latest"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git 'https://github.com/your-username/iris-classifier.git'
            }
        }

        stage('Train & Register Model') {
            steps {
                sh 'python train_register.py'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push $DOCKER_IMAGE
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl delete pod iris-classifier --ignore-not-found || true'
                sh 'kubectl apply -f iris-classifier.yaml'
            }
        }

        stage('Port Forward & Smoke Test') {
            steps {
                script {
                    // Background port forward
                    sh "nohup kubectl port-forward service/iris-service 1234:1234 > port-forward.log 2>&1 &"
                    sleep(time: 10, unit: 'SECONDS')
                }
                sh 'python predictions.py'
            }
        }
    }

    post {
        failure {
            mail to: 'you@example.com',
                 subject: "Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Something went wrong. Check the Jenkins console log."
        }
    }
}
